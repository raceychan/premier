{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Premier","text":"<p>Premier is a versatile Python toolkit that can be used in three main ways:</p> <ol> <li>Lightweight Standalone API Gateway - Run as a dedicated gateway service</li> <li>ASGI App/Middleware - Wrap existing ASGI applications or add as middleware</li> <li>Decorator Mode - Use Premier decorators directly on functions for maximum flexibility</li> </ol> <p>Premier transforms any Python web application into a full-featured API gateway with caching, rate limiting, retry logic, timeouts, and performance monitoring.</p> <p>Premier comes with a nice dashboard for you to monitor your requests</p> <p></p>"},{"location":"#features","title":"Features","text":"<p>Premier provides enterprise-grade API gateway functionality with:</p> <ul> <li>API Gateway Features - caching, rate limiting, retry logic, and timeout, etc.</li> <li>Path-Based Policies - Different features per route with regex matching</li> <li>Load Balancing &amp; Circuit Breaker - Round robin load balancing with fault tolerance</li> <li>WebSocket Support - Full WebSocket proxying with rate limiting and monitoring</li> <li>Web Dashboard - Built-in web GUI for monitoring and configuration management</li> <li>YAML Configuration - Declarative configuration with namespace support</li> </ul> <p>... and more</p>"},{"location":"#why-premier","title":"Why Premier","text":"<p>Premier is designed for simplicity and accessibility - perfect for simple applications that need API gateway functionality without introducing complex tech stacks like Kong, Ambassador, or Istio.</p> <p>Key advantages:</p> <ul> <li>Zero Code Changes - Wrap existing ASGI apps without modifications</li> <li>Simple Setup - Single dependency, no external services required</li> <li>Dual Mode Operation - Plugin for existing apps OR standalone gateway</li> <li>Python Native - Built for Python developers, integrates seamlessly</li> <li>Lightweight - Minimal overhead, maximum performance</li> <li>Hot Reloadable - Update configurations without restarts</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#plugin-mode-recommended","title":"Plugin Mode (Recommended)","text":"<p>How it works: Each app instance has its own Premier gateway wrapper</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App Instance 1                                              \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502   Premier       \u2502\u2500\u2500\u2500\u2500\u2502       Your ASGI App             \u2502  \u2502\n\u2502 \u2502   Gateway       \u2502    \u2502     (FastAPI/Django/etc)        \u2502  \u2502\n\u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502    \u2502                                 \u2502  \u2502\n\u2502 \u2502  \u2502Cache     \u2502   \u2502    \u2502  @app.get(\"/api/users\")         \u2502  \u2502\n\u2502 \u2502  \u2502RateLimit \u2502   \u2502    \u2502  async def get_users():         \u2502  \u2502\n\u2502 \u2502  \u2502Retry     \u2502   \u2502    \u2502      return users               \u2502  \u2502\n\u2502 \u2502  \u2502Timeout   \u2502   \u2502    \u2502                                 \u2502  \u2502\n\u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502    \u2502                                 \u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>You can keep your existing app.py file untouched</p> <pre><code># app.py\nfrom premier.asgi import ASGIGateway, GatewayConfig\nfrom fastapi import FastAPI\n\n# Your existing app - no changes needed\napp = FastAPI()\n\n@app.get(\"/api/users/{user_id}\")\nasync def get_user(user_id: int):\n    return await fetch_user_from_database(user_id)\n</code></pre> <p>Next, import your app instance and wrap it with ASGIGateway:</p> <pre><code># gateway.py\nfrom .app import app\n# Load configuration and wrap app\nconfig = GatewayConfig.from_file(\"gateway.yaml\")\napp = ASGIGateway(config=config, app=app)\n</code></pre> <p>Then, instead of serving the original app directly, serve the one wrapped with ASGIGateway.</p>"},{"location":"#standalone-mode","title":"Standalone Mode","text":"<p>How it works: Single gateway handles all requests and forwards to backend services</p> <pre><code>                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    Client Request      \u2502   Premier Gateway   \u2502\n         \u2502              \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n         \u2502              \u2502  \u2502 Cache        \u2502   \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba  \u2502 RateLimit    \u2502   \u2502\n                        \u2502  \u2502 Retry        \u2502   \u2502\n                        \u2502  \u2502 Timeout      \u2502   \u2502\n                        \u2502  \u2502 Monitoring   \u2502   \u2502\n                        \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502      \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u25bc                          \u25bc\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502   Backend 1   \u2502          \u2502   Backend 2   \u2502\n            \u2502 (Any Service) \u2502          \u2502 (Any Service) \u2502\n            \u2502               \u2502          \u2502               \u2502\n            \u2502 Node.js API   \u2502          \u2502  Python API   \u2502\n            \u2502 Java Service  \u2502          \u2502  .NET Service \u2502\n            \u2502 Static Files  \u2502          \u2502  Database     \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># main.py\nfrom premier.asgi import ASGIGateway, GatewayConfig\n\nconfig = GatewayConfig.from_file(\"gateway.yaml\")\ngateway = ASGIGateway(config, servers=[\"http://backend:8000\"])\n</code></pre> <pre><code>uvicorn src:main\n</code></pre>"},{"location":"#decorator-mode","title":"Decorator Mode","text":"<p>How it works: Apply Premier features directly to individual functions with decorators - no ASGI app required</p> <p>For detailed examples and tutorials, see the Examples page.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.10</li> <li>Redis &gt;= 5.0.3 (optional, for distributed deployments)</li> <li>PyYAML (for YAML configuration)</li> <li>aiohttp (optional, for standalone mode)</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Install Premier in your project</li> <li>Configuration Reference - Complete configuration documentation</li> <li>Web Dashboard - Monitor and manage your gateway</li> <li>Examples - Complete examples and tutorials</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"changelog/","title":"CHANGELOG","text":""},{"location":"changelog/#version-0410-2025-06-25","title":"version 0.4.10 (2025-06-25)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>\ud83d\udd27 Customizable Error Responses - Added configurable error status codes and messages for ASGI Gateway features:</li> <li><code>TimeoutConfig</code> now supports <code>error_status</code> and <code>error_message</code> fields (defaults: 504, \"Request timeout\")</li> <li><code>RateLimitConfig</code> now supports <code>error_status</code> and <code>error_message</code> fields (defaults: 429, \"Rate limit exceeded\")</li> <li>Users can customize error responses in YAML configuration files</li> <li>Example:     <pre><code>timeout:\n  seconds: 5.0\n  error_status: 408\n  error_message: \"Custom timeout message\"\nrate_limit:\n  quota: 100\n  duration: 60\n  error_status: 503\n  error_message: \"Service temporarily unavailable\"\n</code></pre></li> </ul>"},{"location":"changelog/#refactoring","title":"Refactoring","text":"<ul> <li>\ud83d\udce6 Features Directory Restructuring - Major code organization improvements:</li> <li>Moved core features to dedicated <code>premier/features/</code> directory</li> <li><code>premier/cache.py</code> \u2192 <code>premier/features/cache.py</code></li> <li><code>premier/retry.py</code> \u2192 <code>premier/features/retry.py</code></li> <li><code>premier/timer.py</code> \u2192 <code>premier/features/timer.py</code></li> <li><code>premier/throttler/</code> \u2192 <code>premier/features/throttler/</code></li> <li> <p>Updated all imports and dependencies accordingly</p> </li> <li> <p>\ud83d\udee0\ufe0f Error Response Encapsulation - Eliminated duplicate error response code:</p> </li> <li>Created reusable <code>send_error_response()</code> function in ASGI Gateway</li> <li>Standardized error responses across timeout, rate limiting, and default handlers</li> <li>Supports both JSON and plain text content types</li> <li>Reduced code duplication and improved maintainability</li> </ul>"},{"location":"changelog/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Enhanced ASGI Gateway architecture with better error handling patterns</li> <li>Improved configuration parsing for new error response fields</li> <li>All existing tests continue to pass with new functionality</li> <li>Better separation of concerns in error response management</li> </ul>"},{"location":"changelog/#version-049-2025-06-14","title":"version 0.4.9 (2025-06-14)","text":""},{"location":"changelog/#bug-fixes-features","title":"Bug Fixes &amp; Features","text":"<ul> <li>Dashboard Stats Tracking - Fixed dashboard statistics tracking issues and improved real-time data accuracy</li> <li>Dashboard Styling &amp; Theme - Enhanced dashboard visual appearance with improved styling and theme consistency</li> <li> <p>\ufe0fConfigurable Server List \u2013 Users can now define and manage servers directly from a configuration file</p> </li> <li> <p>Load Balancing (Round Robin) \u2013 Implemented round robin load balancer for distributing traffic evenly across servers</p> </li> <li> <p>\ufe0fCircuit Breaker Support \u2013 Added circuit breaker mechanism to improve fault tolerance and system resilience</p> </li> </ul>"},{"location":"changelog/#refactoring_1","title":"Refactoring","text":"<ul> <li>\ud83d\udd27 ASGI Architecture Refactor - Major restructuring of ASGI components for better maintainability:</li> <li>Separated forward service logic into dedicated module (<code>premier/asgi/forward.py</code>)</li> <li>Created dedicated dashboard service (<code>premier/dashboard/service.py</code>) </li> <li>Implemented load balancer component (<code>premier/asgi/loadbalancer.py</code>)</li> <li>Simplified main gateway module by extracting specialized services</li> <li>Improved code organization and separation of concerns</li> </ul>"},{"location":"changelog/#technical-improvements_1","title":"Technical Improvements","text":"<ul> <li>Enhanced dashboard service architecture with better separation of concerns</li> <li>Improved ASGI gateway performance through modular design</li> <li>Better error handling and logging in dashboard components</li> <li>Streamlined configuration management in dashboard</li> </ul>"},{"location":"changelog/#version-048-2025-06-14","title":"version 0.4.8 (2025-06-14)","text":""},{"location":"changelog/#major-features","title":"Major Features","text":"<ul> <li>\ud83c\udf9b\ufe0f Web Dashboard - Built-in web GUI for real-time monitoring and configuration management</li> <li>Live request/response metrics and performance analytics</li> <li>Interactive configuration editor with YAML validation</li> <li>Cache management and rate limiting dashboard</li> <li>Health monitoring and system statistics</li> <li> <p>Available at <code>/premier/dashboard</code></p> </li> <li> <p>\ud83d\ude80 Complete Example Application - Production-ready example with FastAPI backend</p> </li> <li>Comprehensive API endpoints demonstrating all Premier features</li> <li>YAML configuration with path-specific policies</li> <li>Documentation and testing guides</li> <li> <p>Dashboard integration showcase</p> </li> <li> <p>\ud83d\udcda Enhanced Documentation - Comprehensive documentation overhaul</p> </li> <li>Separate guides for web dashboard and examples</li> <li>Updated README with better organization</li> <li>Clear quick-start instructions</li> <li>Production deployment guidance</li> </ul>"},{"location":"changelog/#new-files-components","title":"New Files &amp; Components","text":"<ul> <li><code>premier/dashboard/</code> - Complete web dashboard implementation</li> <li><code>example/</code> - Full-featured example application</li> <li><code>docs/web-gui.md</code> - Web dashboard documentation</li> <li><code>docs/examples.md</code> - Examples and tutorials guide</li> <li>Enhanced ASGI gateway with dashboard integration</li> </ul>"},{"location":"changelog/#improvements","title":"Improvements","text":"<ul> <li>ASGI Gateway Enhancement - Better integration and dashboard support</li> <li>Configuration Management - Hot-reload configuration from web interface</li> <li>Monitoring - Real-time performance metrics and request analytics</li> <li>User Experience - Simplified setup with comprehensive examples</li> </ul>"},{"location":"changelog/#v040-2024-06-05","title":"v0.4.0 (2024-06-05)","text":""},{"location":"changelog/#chore","title":"Chore","text":"<ul> <li> <p>chore: fix test (<code>17ce3e4</code>)</p> </li> <li> <p>chore: dev (<code>22be11c</code>)</p> </li> <li> <p>chore: readme (<code>7d5a5bc</code>)</p> </li> <li> <p>chore: readme (<code>f376b5b</code>)</p> </li> <li> <p>chore: readme (<code>bdcb13f</code>)</p> </li> <li> <p>chore: readme (<code>9d14e9e</code>)</p> </li> </ul>"},{"location":"changelog/#feature","title":"Feature","text":"<ul> <li> <p>feat: better error message (<code>b1c2523</code>)</p> </li> <li> <p>feat: async queue (<code>d621219</code>)</p> </li> <li> <p>feat: aio (<code>67d85c2</code>)</p> </li> <li> <p>feat: aio (<code>710e934</code>)</p> </li> </ul>"},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li> <p>fix: make TaskQueue.put atomic using redis lua script (<code>69a49aa</code>)</p> </li> <li> <p>fix: fixed asyncio throttler using asyncio.Lock (<code>4811312</code>)</p> </li> <li> <p>fix: fix typing (<code>29f4a76</code>)</p> </li> </ul>"},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>refactor: rewrite leaky bucket (<code>5e38981</code>)</li> </ul>"},{"location":"changelog/#unknown","title":"Unknown","text":"<ul> <li> <p>chores: fix conflicts (<code>07198a8</code>)</p> </li> <li> <p>Merge branch 'dev' adding async throttler for async function, also fixes a few bug in threading case (<code>630c8ed</code>)</p> </li> <li> <p>chores: last commit before merge (<code>17110a9</code>)</p> </li> <li> <p>chores: fix type errors (<code>0a69501</code>)</p> </li> <li> <p>chores: refactor put script (<code>fbca52e</code>)</p> </li> <li> <p>chores: fix typing (<code>fccb598</code>)</p> </li> <li> <p>wip: working on asyncio throttler (<code>f933f10</code>)</p> </li> <li> <p>chores: remove setup.py (<code>82b9ad6</code>)</p> </li> <li> <p>chores: test (<code>6ff20d2</code>)</p> </li> </ul>"},{"location":"changelog/#v030-2024-04-08","title":"v0.3.0 (2024-04-08)","text":""},{"location":"changelog/#chore_1","title":"Chore","text":"<ul> <li>chore: readme (<code>2429f50</code>)</li> </ul>"},{"location":"changelog/#feature_1","title":"Feature","text":"<ul> <li>feat: refactor (<code>e9f0c4d</code>)</li> </ul>"},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>fix: minor errors (<code>b8a630b</code>)</li> </ul>"},{"location":"changelog/#unknown_1","title":"Unknown","text":"<ul> <li>Merge pull request #1 from raceychan/dev</li> </ul> <p>merge latest dev branch (<code>8523182</code>)</p>"},{"location":"changelog/#v020-2024-04-03","title":"v0.2.0 (2024-04-03)","text":""},{"location":"changelog/#feature_2","title":"Feature","text":"<ul> <li> <p>feat: leakybucket (<code>b0dde75</code>)</p> </li> <li> <p>feat: readme (<code>4105d39</code>)</p> </li> </ul>"},{"location":"changelog/#v010-2024-04-02","title":"v0.1.0 (2024-04-02)","text":""},{"location":"changelog/#feature_3","title":"Feature","text":"<ul> <li> <p>feat: rename (<code>8565565</code>)</p> </li> <li> <p>feat: readme (<code>1b9932a</code>)</p> </li> <li> <p>feat: readme (<code>bb93c35</code>)</p> </li> <li> <p>feat: readme (<code>d1e2b16</code>)</p> </li> <li> <p>feat: readme (<code>3f406db</code>)</p> </li> <li> <p>feat: readme (<code>a397853</code>)</p> </li> <li> <p>feat: readme (<code>8584238</code>)</p> </li> <li> <p>feat: first commit (<code>ba6abfc</code>)</p> </li> <li> <p>feat: first commit (<code>4a83c49</code>)</p> </li> <li> <p>feat: first commit (<code>7be616c</code>)</p> </li> </ul>"},{"location":"changelog/#version-043","title":"version 0.4.3","text":"<p>Feature</p> <ul> <li>[x] <code>cache</code> </li> </ul> <p>refactor:</p> <p>No longer support sync version of decorator, which means all decorated function would be async.</p>"},{"location":"changelog/#version-046","title":"version 0.4.6","text":"<ul> <li>\u2705 Implemented facade pattern with Premier class</li> <li>\u2705 Added comprehensive logging support with ILogger interface</li> <li>\u2705 Enhanced retry logic with detailed logging</li> <li>\u2705 Improved timeout handling with logging</li> <li>\u2705 Updated documentation and examples</li> <li>\u2705 Removed legacy task queue implementation</li> <li>\u2705 Made private functions properly private with underscore prefix</li> </ul>"},{"location":"changelog/#version-047","title":"version 0.4.7","text":"<p>Web GUI for config and monitor</p>"},{"location":"configuration/","title":"Configuration Reference","text":"<p>Premier supports extensive configuration options for path-based policies. This page provides a complete reference of all available configuration fields.</p>"},{"location":"configuration/#yaml-configuration-overview","title":"YAML Configuration Overview","text":"<p>Premier uses YAML files for declarative configuration. Here's the basic structure:</p> <pre><code>premier:\n  keyspace: \"my-api\"           # Namespace for cache keys and throttling\n  servers: []                  # Backend servers (standalone mode)\n  paths: []                    # Path-specific configuration rules\n  default_features: {}         # Default features applied to all paths\n</code></pre>"},{"location":"configuration/#top-level-configuration","title":"Top-Level Configuration","text":"Field Type Description Default <code>keyspace</code> string Namespace for cache keys and throttling <code>\"asgi-gateway\"</code> <code>paths</code> array Path-specific configuration rules <code>[]</code> <code>default_features</code> object Default features applied to all paths <code>null</code> <code>servers</code> array Backend server URLs for standalone mode <code>null</code>"},{"location":"configuration/#example","title":"Example","text":"<pre><code>premier:\n  keyspace: \"production-api\"\n  servers: \n    - \"http://backend1:8000\"\n    - \"http://backend2:8000\"\n\n  default_features:\n    timeout:\n      seconds: 10.0\n    monitoring:\n      log_threshold: 1.0\n</code></pre>"},{"location":"configuration/#path-configuration","title":"Path Configuration","text":"<p>Configure features for specific URL patterns using path rules.</p> Field Type Description Example <code>pattern</code> string Path pattern (regex or glob-style) <code>\"/api/users/*\"</code>, <code>\"^/admin/.*$\"</code> <code>features</code> object Features to apply to this path See feature configuration below"},{"location":"configuration/#pattern-matching","title":"Pattern Matching","text":"<p>Premier supports both glob-style and regex patterns:</p> Glob StyleRegex Style <pre><code>paths:\n  - pattern: \"/api/users/*\"        # Matches /api/users/123\n  - pattern: \"/api/*/posts\"        # Matches /api/v1/posts\n  - pattern: \"/files/**\"           # Matches /files/images/photo.jpg\n</code></pre> <pre><code>paths:\n  - pattern: \"^/api/users/\\\\d+$\"   # Matches /api/users/123 (numbers only)\n  - pattern: \"^/admin/.*$\"         # Matches any path starting with /admin/\n  - pattern: \"\\\\.json$\"            # Matches paths ending with .json\n</code></pre>"},{"location":"configuration/#feature-configuration","title":"Feature Configuration","text":""},{"location":"configuration/#cache-configuration","title":"Cache Configuration","text":"<p>Enable response caching for improved performance.</p> Field Type Description Default Example <code>expire_s</code> integer Cache expiration in seconds <code>null</code> (no expiration) <code>300</code> <code>cache_key</code> string/function Custom cache key Auto-generated <code>\"user:{user_id}\"</code> <pre><code>cache:\n  expire_s: 300                 # Cache for 5 minutes\n  cache_key: \"custom_key\"       # Optional custom key\n</code></pre>"},{"location":"configuration/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":"<p>Control request rates to prevent abuse and ensure fair usage.</p> Field Type Description Default Example <code>quota</code> integer Number of requests allowed Required <code>100</code> <code>duration</code> integer Time window in seconds Required <code>60</code> <code>algorithm</code> string Rate limiting algorithm <code>\"fixed_window\"</code> <code>\"sliding_window\"</code> <code>bucket_size</code> integer Bucket size (for leaky_bucket) Same as quota <code>50</code> <code>error_status</code> integer HTTP status code for rate limit errors <code>429</code> <code>503</code> <code>error_message</code> string Error message for rate limit errors <code>\"Rate limit exceeded\"</code> <code>\"Too many requests\"</code>"},{"location":"configuration/#available-algorithms","title":"Available Algorithms","text":"<ul> <li><code>fixed_window</code>: Simple time-based windows</li> <li><code>sliding_window</code>: Smooth rate limiting over time  </li> <li><code>token_bucket</code>: Burst capacity with steady refill rate</li> <li><code>leaky_bucket</code>: Queue-based rate limiting with controlled draining</li> </ul> <pre><code>rate_limit:\n  quota: 100\n  duration: 60\n  algorithm: \"sliding_window\"\n  error_status: 429\n  error_message: \"Rate limit exceeded for this endpoint\"\n</code></pre>"},{"location":"configuration/#timeout-configuration","title":"Timeout Configuration","text":"<p>Set maximum response times to prevent hanging requests.</p> Field Type Description Default Example <code>seconds</code> float Timeout duration in seconds Required <code>5.0</code> <code>error_status</code> integer HTTP status code for timeout errors <code>504</code> <code>408</code> <code>error_message</code> string Error message for timeout errors <code>\"Request timeout\"</code> <code>\"Request took too long\"</code> <pre><code>timeout:\n  seconds: 5.0\n  error_status: 504\n  error_message: \"Request timeout - please try again\"\n</code></pre>"},{"location":"configuration/#retry-configuration","title":"Retry Configuration","text":"<p>Automatically retry failed requests with configurable backoff strategies.</p> Field Type Description Default Example <code>max_attempts</code> integer Maximum retry attempts <code>3</code> <code>5</code> <code>wait</code> float/array/function Wait time between retries <code>1.0</code> <code>[1, 2, 4]</code> <code>exceptions</code> array Exception types to retry on <code>[Exception]</code> Custom exceptions"},{"location":"configuration/#wait-strategies","title":"Wait Strategies","text":"Fixed DelayExponential Backoff <pre><code>retry:\n  max_attempts: 3\n  wait: 1.0              # Wait 1 second between retries\n</code></pre> <pre><code>retry:\n  max_attempts: 4\n  wait: [1, 2, 4, 8]     # Increasing delays\n</code></pre>"},{"location":"configuration/#circuit-breaker-configuration","title":"Circuit Breaker Configuration","text":"<p>Prevent cascading failures by temporarily disabling failing services.</p> Field Type Description Default Example <code>failure_threshold</code> integer Failures before opening circuit <code>5</code> <code>10</code> <code>recovery_timeout</code> float Seconds before attempting recovery <code>60.0</code> <code>120.0</code> <code>expected_exception</code> string Exception type that triggers circuit <code>\"Exception\"</code> <code>\"ConnectionError\"</code> <pre><code>circuit_breaker:\n  failure_threshold: 5\n  recovery_timeout: 60.0\n  expected_exception: \"ConnectionError\"\n</code></pre>"},{"location":"configuration/#monitoring-configuration","title":"Monitoring Configuration","text":"<p>Configure performance monitoring and logging thresholds.</p> Field Type Description Default Example <code>log_threshold</code> float Log requests taking longer than this (seconds) <code>0.1</code> <code>1.0</code> <pre><code>monitoring:\n  log_threshold: 0.1          # Log requests &gt; 100ms\n</code></pre>"},{"location":"configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<p>Here's a comprehensive example showing all features:</p> <pre><code>premier:\n  keyspace: \"production-api\"\n  servers: \n    - \"http://backend1:8000\"\n    - \"http://backend2:8000\"\n\n  paths:\n    # High-traffic user API with aggressive caching\n    - pattern: \"/api/users/*\"\n      features:\n        cache:\n          expire_s: 300\n        rate_limit:\n          quota: 1000\n          duration: 60\n          algorithm: \"sliding_window\"\n          error_status: 429\n          error_message: \"Rate limit exceeded for user API\"\n        timeout:\n          seconds: 5.0\n          error_status: 504\n          error_message: \"User API timeout\"\n        retry:\n          max_attempts: 3\n          wait: [1, 2, 4]\n        circuit_breaker:\n          failure_threshold: 5\n          recovery_timeout: 60.0\n        monitoring:\n          log_threshold: 0.1\n\n    # Admin API with strict rate limiting\n    - pattern: \"/api/admin/*\"\n      features:\n        rate_limit:\n          quota: 10\n          duration: 60\n          algorithm: \"token_bucket\"\n          error_status: 403\n          error_message: \"Admin API rate limit exceeded\"\n        timeout:\n          seconds: 30.0\n          error_status: 408\n          error_message: \"Admin operation timeout\"\n        monitoring:\n          log_threshold: 0.5\n\n    # WebSocket connections\n    - pattern: \"/ws/*\"\n      features:\n        rate_limit:\n          quota: 50\n          duration: 60\n          algorithm: \"sliding_window\"\n        monitoring:\n          log_threshold: 1.0\n\n  # Applied to all paths that don't match above patterns\n  default_features:\n    timeout:\n      seconds: 10.0\n    rate_limit:\n      quota: 100\n      duration: 60\n      algorithm: \"fixed_window\"\n    monitoring:\n      log_threshold: 1.0\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>You can override configuration values using environment variables:</p> <pre><code>export PREMIER_KEYSPACE=\"production\"\nexport PREMIER_REDIS_URL=\"redis://redis:6379\"\nexport PREMIER_LOG_LEVEL=\"INFO\"\n</code></pre>"},{"location":"configuration/#loading-configuration","title":"Loading Configuration","text":""},{"location":"configuration/#from-file","title":"From File","text":"<pre><code>from premier.asgi import GatewayConfig\n\nconfig = GatewayConfig.from_file(\"gateway.yaml\")\n</code></pre>"},{"location":"configuration/#from-dictionary","title":"From Dictionary","text":"<pre><code>config_dict = {\n    \"premier\": {\n        \"keyspace\": \"my-api\",\n        \"paths\": [...]\n    }\n}\nconfig = GatewayConfig.from_dict(config_dict)\n</code></pre>"},{"location":"configuration/#from-environment","title":"From Environment","text":"<pre><code># Loads from PREMIER_CONFIG_FILE environment variable\nconfig = GatewayConfig.from_env()\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Premier validates your configuration at startup and provides helpful error messages:</p> <pre><code>try:\n    config = GatewayConfig.from_file(\"invalid.yaml\")\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"configuration/#hot-reloading","title":"Hot Reloading","text":"<p>Premier supports hot reloading of configuration in development mode:</p> <pre><code>config = GatewayConfig.from_file(\"gateway.yaml\", watch=True)\ngateway = ASGIGateway(config, app=app)\n</code></pre> <p>Changes to the YAML file will be automatically detected and applied without restarting the application.</p>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Web Dashboard - Monitor and edit configuration via web UI</li> <li>Examples - See complete configuration examples</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This directory contains practical examples demonstrating Premier API Gateway features.</p>"},{"location":"examples/#complete-example-application","title":"Complete Example Application","text":"<p>The <code>example/</code> directory contains a full-featured demonstration with:</p> <ul> <li>FastAPI Backend (<code>app.py</code>) - Complete API with users, products, admin endpoints</li> <li>Premier Configuration (<code>gateway.yaml</code>) - Production-ready gateway policies  </li> <li>Dashboard Integration (<code>main.py</code>) - Gateway with web UI</li> <li>Documentation (<code>README.md</code>) - Detailed setup and testing guide</li> </ul>"},{"location":"examples/#quick-start","title":"Quick Start","text":"<pre><code>cd example\nuv run main.py\n</code></pre> <p>Visit: http://localhost:8000/premier/dashboard</p>"},{"location":"examples/#what-youll-learn","title":"What You'll Learn","text":""},{"location":"examples/#1-plugin-mode-integration","title":"1. Plugin Mode Integration","text":"<pre><code>from premier.asgi import ASGIGateway, GatewayConfig\nfrom app import app\n\nconfig = GatewayConfig.from_file(\"gateway.yaml\")\ngateway = ASGIGateway(config, app=app)\n</code></pre>"},{"location":"examples/#2-yaml-configuration","title":"2. YAML Configuration","text":"<pre><code>premier:\n  paths:\n    - pattern: \"/api/users*\"\n      features:\n        cache:\n          expire_s: 300\n        rate_limit:\n          quota: 100\n          duration: 60\n</code></pre>"},{"location":"examples/#3-web-dashboard","title":"3. Web Dashboard","text":"<ul> <li>Real-time monitoring</li> <li>Configuration editing</li> <li>Performance analytics</li> <li>Cache management</li> </ul>"},{"location":"examples/#api-endpoints-for-testing","title":"API Endpoints for Testing","text":""},{"location":"examples/#caching-demo","title":"Caching Demo","text":"<ul> <li><code>GET /api/users</code> - 5 minute cache</li> <li><code>GET /api/products</code> - 10 minute cache  </li> <li><code>GET /api/search?q=alice</code> - 30 minute cache</li> </ul>"},{"location":"examples/#rate-limiting-demo","title":"Rate Limiting Demo","text":"<ul> <li><code>GET /api/admin/stats</code> - 10 requests/minute</li> <li><code>POST /api/bulk/process</code> - 5 requests/minute</li> <li><code>GET /api/users</code> - 100 requests/minute</li> </ul>"},{"location":"examples/#resilience-demo","title":"Resilience Demo","text":"<ul> <li><code>GET /api/slow</code> - Tests timeouts (5 second limit)</li> <li><code>GET /api/unreliable</code> - Tests retry logic (60% failure rate)</li> </ul>"},{"location":"examples/#monitoring-demo","title":"Monitoring Demo","text":"<ul> <li>All endpoints have performance thresholds</li> <li>Dashboard shows real-time metrics</li> <li>Request logs with timing data</li> </ul>"},{"location":"examples/#testing-commands","title":"Testing Commands","text":""},{"location":"examples/#cache-performance","title":"Cache Performance","text":"<pre><code># Cache miss (slow)\ntime curl http://localhost:8000/api/users\n\n# Cache hit (fast)  \ntime curl http://localhost:8000/api/users\n</code></pre>"},{"location":"examples/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Trigger rate limiting\nfor i in {1..15}; do \n  curl -w \"%{http_code}\\n\" http://localhost:8000/api/admin/stats\ndone\n</code></pre>"},{"location":"examples/#timeout-handling","title":"Timeout Handling","text":"<pre><code># Some requests timeout after 5s\ncurl -w \"Time: %{time_total}s\\n\" http://localhost:8000/api/slow\n</code></pre>"},{"location":"examples/#retry-logic","title":"Retry Logic","text":"<pre><code># Automatic retries on failures\ncurl -v http://localhost:8000/api/unreliable\n</code></pre>"},{"location":"examples/#configuration-patterns","title":"Configuration Patterns","text":""},{"location":"examples/#high-traffic-endpoints","title":"High-Traffic Endpoints","text":"<pre><code>- pattern: \"/api/popular/*\"\n  features:\n    cache:\n      expire_s: 600\n    rate_limit:\n      quota: 1000\n      algorithm: \"token_bucket\"\n</code></pre>"},{"location":"examples/#adminsensitive-endpoints","title":"Admin/Sensitive Endpoints","text":"<pre><code>- pattern: \"/api/admin/*\"\n  features:\n    rate_limit:\n      quota: 10\n      algorithm: \"fixed_window\"\n    timeout:\n      seconds: 30.0\n</code></pre>"},{"location":"examples/#expensive-operations","title":"Expensive Operations","text":"<pre><code>- pattern: \"/api/analytics/*\"\n  features:\n    cache:\n      expire_s: 1800\n    rate_limit:\n      quota: 5\n    timeout:\n      seconds: 60.0\n</code></pre>"},{"location":"examples/#advanced-features","title":"Advanced Features","text":""},{"location":"examples/#custom-cache-keys","title":"Custom Cache Keys","text":"<pre><code>cache:\n  expire_s: 300\n  key_template: \"custom:{method}:{path}:{user_id}\"\n</code></pre>"},{"location":"examples/#multiple-rate-limit-algorithms","title":"Multiple Rate Limit Algorithms","text":"<ul> <li><code>sliding_window</code> - Smooth rate limiting</li> <li><code>token_bucket</code> - Burst handling</li> <li><code>fixed_window</code> - Simple quotas  </li> <li><code>leaky_bucket</code> - Consistent flow</li> </ul>"},{"location":"examples/#retry-strategies","title":"Retry Strategies","text":"<pre><code>retry:\n  max_attempts: 5\n  wait: 1.0\n  backoff: \"exponential\"\n  exceptions: [\"ConnectionError\", \"TimeoutError\"]\n</code></pre>"},{"location":"examples/#production-deployment","title":"Production Deployment","text":""},{"location":"examples/#with-redis-backend","title":"With Redis Backend","text":"<pre><code>from premier.providers.redis import AsyncRedisCache\nfrom redis.asyncio import Redis\n\nredis_client = Redis.from_url(\"redis://localhost:6379\")\ncache_provider = AsyncRedisCache(redis_client)\n\ngateway = ASGIGateway(config, app=app, cache_provider=cache_provider)\n</code></pre>"},{"location":"examples/#multiple-workers","title":"Multiple Workers","text":"<pre><code>uvicorn main:gateway --workers 4 --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"examples/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.10-slim\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nCMD [\"uvicorn\", \"main:gateway\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<ol> <li>Explore the Example - Run the complete example and experiment with the dashboard</li> <li>Try Different Configs - Modify <code>gateway.yaml</code> and see live changes</li> <li>Integration Testing - Use your own FastAPI/Django app</li> <li>Production Setup - Add Redis, monitoring, and scaling</li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<p>Install Premier using pip:</p> <pre><code>pip install premier\n</code></pre>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"installation/#redis-support","title":"Redis Support","text":"<p>For distributed caching and rate limiting, install with Redis support:</p> <pre><code>pip install premier[redis]\n</code></pre> <p>This enables: - Distributed caching across multiple instances - Shared rate limiting across application instances - Production-ready deployments</p>"},{"location":"installation/#all-dependencies","title":"All Dependencies","text":"<p>To install all optional dependencies:</p> <pre><code>pip install premier[all]\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to Premier or need the latest development version:</p> <pre><code>git clone https://github.com/raceychan/premier.git\ncd premier\npip install -e .\n</code></pre> <p>For development with all dependencies:</p> <pre><code>pip install -e .[dev,redis]\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python: &gt;= 3.10</li> <li>Redis: &gt;= 5.0.3 (optional, for distributed deployments)</li> <li>PyYAML: For YAML configuration support</li> <li>aiohttp: Optional, for standalone mode HTTP client</li> </ul>"},{"location":"installation/#verification","title":"Verification","text":"<p>Verify your installation:</p> <pre><code>import premier\nprint(premier.__version__)\n</code></pre> <p>You should see the version number printed without any import errors.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, head to the Quick Start Guide to begin using Premier in your application.</p>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Premier in just a few minutes.</p>"},{"location":"quickstart/#choose-your-integration-mode","title":"Choose Your Integration Mode","text":"<p>Premier supports three different integration modes:</p> <ol> <li>Plugin Mode - Recommended for wrapping existing ASGI applications</li> <li>Standalone Mode - For creating a dedicated API gateway</li> <li>Decorator Mode - For adding features to individual functions</li> </ol>"},{"location":"quickstart/#plugin-mode","title":"Plugin Mode","text":"<p>Perfect for adding gateway features to existing FastAPI, Django, or other ASGI applications.</p>"},{"location":"quickstart/#step-1-create-your-asgi-application","title":"Step 1: Create Your ASGI Application","text":"<pre><code># app.py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/api/users/{user_id}\")\nasync def get_user(user_id: int):\n    return {\"id\": user_id, \"name\": f\"User {user_id}\"}\n\n@app.get(\"/api/posts\")\nasync def get_posts():\n    return [{\"id\": 1, \"title\": \"Hello World\"}]\n</code></pre>"},{"location":"quickstart/#step-2-create-gateway-configuration","title":"Step 2: Create Gateway Configuration","text":"<pre><code># gateway.yaml\npremier:\n  keyspace: \"my-api\"\n\n  paths:\n    - pattern: \"/api/users/*\"\n      features:\n        cache:\n          expire_s: 300\n        rate_limit:\n          quota: 100\n          duration: 60\n        timeout:\n          seconds: 5.0\n\n    - pattern: \"/api/posts\"\n      features:\n        cache:\n          expire_s: 600\n        rate_limit:\n          quota: 200\n          duration: 60\n</code></pre>"},{"location":"quickstart/#step-3-wrap-your-application","title":"Step 3: Wrap Your Application","text":"<pre><code># gateway.py\nfrom premier.asgi import ASGIGateway, GatewayConfig\nfrom .app import app\n\n# Load configuration and wrap your app\nconfig = GatewayConfig.from_file(\"gateway.yaml\")\ngateway_app = ASGIGateway(config=config, app=app)\n</code></pre>"},{"location":"quickstart/#step-4-run-your-gateway","title":"Step 4: Run Your Gateway","text":"<pre><code>uvicorn gateway:gateway_app --reload\n</code></pre> <p>That's it! Your application now has caching, rate limiting, and timeout protection.</p>"},{"location":"quickstart/#standalone-mode","title":"Standalone Mode","text":"<p>Create a dedicated API gateway that forwards requests to backend services.</p>"},{"location":"quickstart/#step-1-create-gateway-configuration","title":"Step 1: Create Gateway Configuration","text":"<pre><code># gateway.yaml\npremier:\n  keyspace: \"gateway\"\n  servers:\n    - \"http://backend1:8000\"\n    - \"http://backend2:8000\"\n\n  paths:\n    - pattern: \"/api/*\"\n      features:\n        cache:\n          expire_s: 300\n        rate_limit:\n          quota: 1000\n          duration: 60\n        timeout:\n          seconds: 10.0\n        retry:\n          max_attempts: 3\n          wait: 1.0\n</code></pre>"},{"location":"quickstart/#step-2-create-gateway-service","title":"Step 2: Create Gateway Service","text":"<pre><code># gateway.py\nfrom premier.asgi import ASGIGateway, GatewayConfig\n\nconfig = GatewayConfig.from_file(\"gateway.yaml\")\napp = ASGIGateway(config)\n</code></pre>"},{"location":"quickstart/#step-3-run-your-gateway","title":"Step 3: Run Your Gateway","text":"<pre><code>uvicorn gateway:app\n</code></pre> <p>The gateway will load balance requests between your backend servers with full gateway features.</p>"},{"location":"quickstart/#decorator-mode","title":"Decorator Mode","text":"<p>Add Premier features directly to individual functions.</p>"},{"location":"quickstart/#step-1-use-premier-decorators","title":"Step 1: Use Premier Decorators","text":"<pre><code>from premier.features.retry import retry\nfrom premier.features.timer import timeit, timeout\nfrom premier.features.cache import cache\n\n@cache(expire_s=300)\n@retry(max_attempts=3, wait=1.0)\n@timeout(seconds=5.0)\n@timeit(log_threshold=0.1)\nasync def fetch_user_data(user_id: int):\n    # Your function with retry, timeout, caching, and timing\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.example.com/users/{user_id}\")\n        return response.json()\n</code></pre>"},{"location":"quickstart/#step-2-use-your-functions","title":"Step 2: Use Your Functions","text":"<pre><code># Automatic retry on failure, caching, timeout protection\nuser_data = await fetch_user_data(123)\n</code></pre>"},{"location":"quickstart/#accessing-the-web-dashboard","title":"Accessing the Web Dashboard","text":"<p>Premier includes a built-in web dashboard for monitoring and configuration.</p> <p>Add this to your configuration:</p> <pre><code>premier:\n  dashboard:\n    enabled: true\n    path: \"/premier/dashboard\"\n</code></pre> <p>Then visit <code>http://localhost:8000/premier/dashboard</code> to see:</p> <ul> <li>Real-time request metrics</li> <li>Cache statistics</li> <li>Rate limiting status</li> <li>Configuration management</li> <li>Performance analytics</li> </ul>"},{"location":"quickstart/#production-configuration","title":"Production Configuration","text":"<p>For production deployments, consider using Redis for distributed caching:</p> <pre><code>from premier.asgi import ASGIGateway, GatewayConfig\nfrom premier.providers.redis import AsyncRedisCache\nfrom redis.asyncio import Redis\n\n# Redis backend for distributed caching\nredis_client = Redis.from_url(\"redis://localhost:6379\")\ncache_provider = AsyncRedisCache(redis_client)\n\n# Load configuration\nconfig = GatewayConfig.from_file(\"production.yaml\")\n\n# Create production gateway\napp = ASGIGateway(config, app=your_app, cache_provider=cache_provider)\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide - Learn about all configuration options</li> <li>Web Dashboard - Explore the monitoring interface</li> <li>Examples - See complete working examples</li> </ul>"},{"location":"web-gui/","title":"Web GUI Dashboard","text":"<p>Premier provides a built-in web dashboard for monitoring and managing your API gateway in real-time.</p>"},{"location":"web-gui/#features","title":"Features","text":"<ul> <li>Real-time Monitoring - Live request/response metrics and performance data </li> <li>Configuration Management - View and update gateway configuration </li> <li>Request Analytics - Detailed request logs and statistics</li> <li>Cache Management - Monitor cache hit rates and manage cached data</li> <li>Rate Limiting Dashboard - View current rate limits and usage</li> <li>Health Monitoring - System health and uptime statistics</li> </ul>"},{"location":"web-gui/#accessing-the-dashboard","title":"Accessing the Dashboard","text":"<p>The dashboard is automatically available at <code>/premier/dashboard</code> when you run your Premier gateway:</p> <pre><code>http://localhost:8000/premier/dashboard\n</code></pre>"},{"location":"web-gui/#configuration","title":"Configuration","text":"<p>The dashboard is enabled by default. You can customize its behavior in your configuration:</p>"},{"location":"web-gui/#dashboard-sections","title":"Dashboard Sections","text":""},{"location":"web-gui/#overview","title":"Overview","text":"<ul> <li>Real-time request rate</li> <li>Average response time</li> <li>Error rate</li> <li>Cache hit ratio</li> </ul>"},{"location":"web-gui/#requests","title":"Requests","text":"<ul> <li>Live request log</li> <li>Response time distribution</li> <li>Status code breakdown</li> <li>Top endpoints by traffic</li> </ul>"},{"location":"web-gui/#configuration_1","title":"Configuration","text":"<ul> <li>Current gateway configuration</li> <li>Path-based policies</li> <li>Feature settings</li> <li>Hot reload configuration changes</li> </ul>"},{"location":"web-gui/#cache","title":"Cache","text":"<ul> <li>Cache statistics</li> <li>Hit/miss ratios</li> <li>Cache size and memory usage</li> <li>Manual cache management</li> </ul>"},{"location":"web-gui/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Current rate limit status</li> <li>Usage by endpoint</li> <li>Rate limit violations</li> <li>Algorithm performance</li> </ul>"},{"location":"web-gui/#api-endpoints","title":"API Endpoints","text":"<p>The dashboard uses these API endpoints (also available for programmatic access):</p> <ul> <li><code>GET /premier/api/stats</code> - Current statistics</li> <li><code>GET /premier/api/config</code> - Current configuration</li> <li><code>POST /premier/api/config</code> - Update configuration</li> <li><code>GET /premier/api/cache</code> - Cache statistics</li> <li><code>DELETE /premier/api/cache</code> - Clear cache</li> <li><code>GET /premier/api/requests</code> - Request logs</li> </ul>"},{"location":"web-gui/#custom-styling","title":"Custom Styling","text":"<p>You can customize the dashboard appearance by overriding CSS variables or providing custom themes.</p>"}]}